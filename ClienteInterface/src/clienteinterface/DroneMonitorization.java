/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clienteinterface;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.net.Socket;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import java.util.List;
import javax.swing.SwingWorker;

/**
 *
 * @author djvec
 */
public class DroneMonitorization extends javax.swing.JFrame {
    protected final static int SERVER_PORT = 3000;
    private static int v = 200, iteraciones = 4; 
    private boolean salir = false;
    /**
     * Creates new form DroneMonitorization
     */
    public DroneMonitorization() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        b_volver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1280, 840));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel1.setText("ID: ");

        jLabel2.setText("En espera...");

        jPanel1.setBackground(new java.awt.Color(18, 141, 165));

        jLabel3.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("MONITORIZACION DE VECINOS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(391, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(389, 389, 389))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clienteinterface/plano.jpg"))); // NOI18N
        jLabel4.setText(" ");

        b_volver.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        b_volver.setForeground(new java.awt.Color(18, 141, 165));
        b_volver.setText("VOLVER");
        b_volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_volverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(b_volver, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(552, 552, 552))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(1189, Short.MAX_VALUE))
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(b_volver, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_volverActionPerformed
        // TODO add your handling code here:
        if (salir){
            this.dispose();
            ClienteInterface menu = new ClienteInterface();
            menu.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "Espera. Aun no termino el ciclo", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_b_volverActionPerformed

    // Clases para el dibujado
    private static BufferedImage loadImage(String path) {
        try {
            return ImageIO.read(DroneMonitorization.class.getResourceAsStream(path));
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
    private static BufferedImage copyImage(BufferedImage source) {
       BufferedImage copy = new BufferedImage(source.getWidth(), source.getHeight(), source.getType());
       Graphics2D g = copy.createGraphics();
       g.drawImage(source, 0, 0, null);
       g.dispose();
       return copy;
   }
    private static ImageIcon drawImage(BufferedImage background, BufferedImage dronvecin, BufferedImage dronnuestro, String[] vecin_s, int id) {
        BufferedImage copy = copyImage(background);  // Make a copy of the background
        Graphics2D g = copy.createGraphics();
        
        for(int i = 0; i < v; i++){
            String s = vecin_s[i];
            if(!s.equals("NULL")){
                int x = Integer.parseInt(s.substring(s.indexOf("X: ") + 3, s.indexOf(",")));
                int y = Integer.parseInt(s.substring(s.indexOf("Y: ") + 3, s.indexOf(" It")));
                if (i == (id%v)){
                    g.drawImage(dronnuestro, x, y, null);
                } else{
                    g.drawImage(dronvecin, x, y, null);
                }
            }
        }
        g.dispose();
        return new ImageIcon(copy);
    }
    // Logica servidor
     private class MonitorizacionWorker extends SwingWorker<Void, String[]> {
        private BufferedImage plano, dronvecino, dronnuestro;
        private String[] stringArray;
        private int id;
        @Override
        protected Void doInBackground() throws Exception {
            stringArray = new String[v];
            Arrays.fill(stringArray, "NULL");
            plano = loadImage("/clienteinterface/plano.jpg");
            dronvecino = loadImage("/clienteinterface/dronvecino.png");
            dronnuestro = loadImage("/clienteinterface/nuestrodron.png");

            Socket sockliente = null;
            DataInputStream in = null;

            try {
                sockliente = new Socket("192.168.1.39", SERVER_PORT);
                sockliente.setSoTimeout(0);
                in = new DataInputStream(sockliente.getInputStream());
                id = in.readInt();
                jLabel2.setText(String.valueOf(id));
                jLabel2.setForeground(Color.red);

                Cliente cliente = new Cliente(id, sockliente);
                int mensajesesperando = 0, ackesperando = 0, msjfaltan = v - 1;
                long tini = 0, tfin = 0;
                float ttotal = 0;

                for (int i = 0; i < iteraciones; i++) {
                    DataOutputStream out = new DataOutputStream(cliente.getSocket().getOutputStream());
                    out.writeUTF("[" + cliente.getId() + "]:" + cliente.getCoordenadas() + " Iteracion: " + i);
                    stringArray[id % v] = String.valueOf("[" + cliente.getId() + "]:" + cliente.getCoordenadas() + " Iteracion: " + i);
                    publish(Arrays.copyOf(stringArray, stringArray.length));
                    mensajesesperando += msjfaltan;
                    ackesperando += msjfaltan;
                    tini = System.currentTimeMillis();
                    while (ackesperando > 0 && ((tfin - tini) < 20000)) {
                        String messg = in.readUTF();
                        if (!messg.equals("")) {
                            System.out.println(messg);
                            if (messg.charAt(0) == 'A') {
                                ackesperando--;
                            } else {
                                String stringit = messg.substring(messg.lastIndexOf(':') + 2);
                                out.writeUTF("(" + messg.substring(1, messg.indexOf("]")) + ")ACK recibido Iteracion: " + stringit);
                                int aux = Integer.parseInt(messg.substring(1, messg.indexOf("]")));
                                stringArray[aux % v] = messg;
                                publish(Arrays.copyOf(stringArray, stringArray.length));
                                mensajesesperando--;
                            }
                        }
                        tfin = System.currentTimeMillis();
                    }

                    ttotal += (tfin - tini) / 1e6;;
                }

                while (ackesperando > 0 || mensajesesperando > 0) {
                    String messg = in.readUTF();
                    if (!messg.equals("")) {
                        System.out.println(messg);
                        if (messg.charAt(0) == 'A') {
                            ackesperando--;
                        } else {
                            DataOutputStream out = new DataOutputStream(cliente.getSocket().getOutputStream());
                            String stringit = messg.substring(messg.lastIndexOf(':') + 2);
                            out.writeUTF("(" + messg.substring(1, messg.indexOf("]")) + ")ACK recibido Iteracion: " + stringit);
                            mensajesesperando--;
                        }
                    }
                }

                DataOutputStream out = new DataOutputStream(cliente.getSocket().getOutputStream());
                ttotal /= iteraciones;
                out.writeUTF("FIN");
                out.writeFloat(ttotal);
                String entrada = "";
                do {
                    entrada = in.readUTF();
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                } while (!entrada.equals("DC"));
                cliente.cerrarConexion();
            } catch (IOException ex) {
                System.out.println(ex);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                if (sockliente != null && !sockliente.isClosed()) {
                    try {
                        sockliente.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }

            return null;
        }

       @Override
        protected void process(List<String[]> chunks) {
            String[] latestData = chunks.get(chunks.size() - 1);
            jLabel4.setIcon(drawImage(plano, dronvecino, dronnuestro, latestData, id));
        }

        @Override
        protected void done() {
            salir = true;
        }
    }

    public void IniciarMonitorizacion() {
        MonitorizacionWorker worker = new MonitorizacionWorker();
        worker.execute();
    }
    
    public static class Cliente{
        private Socket sockliente;
        private int idCliente, maxx, minx, maxy, miny;
        private String coordenadas;

        public Cliente(int idCliente, Socket sockliente){
            this.idCliente = idCliente;
            this.sockliente = sockliente;
            this.maxx = 1237;
            this.minx = 0;
            this.maxy = 562;
            this.miny = 0;
        }

        public int getId(){
            return idCliente;
        }

        public Socket getSocket(){
            return sockliente;
        }
        
        public void cerrarConexion(){
            try {
                this.sockliente.close();
            } catch (IOException ex) {
                System.out.println(ex);
            }  
        }
        
        public String getCoordenadas(){
            int posX = (int) ((Math.random() * (maxx - minx)) + minx);
            int posY = (int) ((Math.random() * (maxy - miny)) + miny);
            this.coordenadas = ("Pos X: " + String.valueOf(posX)+", Pos Y: " + String.valueOf(posY));

            return this.coordenadas;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_volver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
